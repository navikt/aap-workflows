name: Merge dependabot pull request
on:
  workflow_call:
    inputs:
      workflow-id:
        required: false
        default: "build-and-deploy.yml"
        type: string
      label:
        required: false
        default: "automerge"
        type: string

jobs:
  merge-pullrequests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/github-script@v7
        env:
          WORKFLOW_ID: ${{ inputs.workflow-id }}
          LABEL: ${{ inputs.label }}
        with:
          script: |
            const { WORKFLOW_ID } = process.env
            const { LABEL } = process.env
            
            console.log("WORKFLOW_ID: " + WORKFLOW_ID)
            console.log("LABEL: " + LABEL)
            
            const today = new Date();
            const julStart = new Date(today.getFullYear(), 11, 20);
            const julSlutt = new Date(today.getFullYear(), 11, 31);
            const nyttaarStart = new Date(today.getFullYear(), 0, 1);
            const nyttaarSlutt = new Date(today.getFullYear(), 0, 3);

            if ((today >= julStart && today <= julSlutt) || (today >= nyttaarStart && today <= nyttaarSlutt)) {
                console.log('Skriptet kjører ikke i ferier');
                return;
            }


            const pulls = await github.paginate(github.rest.pulls.list, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open'
            })
            
            console.log("number of pulls: " + pulls.length)

            const toDager = 2 * 60 * 60 * 24 * 1000 // 2 days
            const filtrert = pulls
                .filter((it) => {
                  if(it.state !== 'open'){
                    console.log(`${it.number} - ${it.title}: filtered, not open`)
                  }
                  return it.state == 'open';
                })
                .filter((it) => {
                  if(it.head.repo.fork){
                    console.log(`${it.number} - ${it.title}: filtered, is fork`)
                  }
                  return !it.head.repo.fork;
                 })
                .filter((it) => {
                  if(it.user.login !== 'dependabot[bot]'){
                    console.log(`${it.number} - ${it.title}: filtered, is not from dependabot`)
                  }
                  return it.user.login === 'dependabot[bot]';
                })
                .filter((it) => {
                    if(new Date(it.created_at).getTime() < (Date.now() - toDager)){
                      console.log(`${it.number} - ${it.title}: filtered, older than two days`)
                    }
                    return new Date(it.created_at).getTime() > (Date.now() - toDager)
                })
                .map((it) => {
                    return {
                        title: it.title,
                        number: it.number,

                    }
                })
                .map(async (it) => {
                    const QUERY = `query($owner: String!, $repo: String!, $pull_number: Int!) {
                                          repository(owner: $owner, name:$repo) {
                                            pullRequest(number:$pull_number) {
                                              commits(last: 1) {
                                                nodes {
                                                  commit {
                                                    statusCheckRollup {
                                                      state
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }`

                    const result = await github.graphql(QUERY, {
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        pull_number: it.number,
                    })
                    const [{ commit: lastCommit }] =
                        result.repository.pullRequest.commits.nodes

                    console.log(`#${it.number}  ${it.title}`);
                    console.log(`checks: ${lastCommit.statusCheckRollup?.state}`);
                    console.log('');
            
                    return {
                        title: it.title,
                        number: it.number,
                        checksOk: lastCommit.statusCheckRollup?.state === 'SUCCESS',
                    }
                })
            
            console.log("filtrert: " + filtrert.length)

            const allePrs = await Promise.all(filtrert)
            console.log('');
            console.log('check mergable');
            const mergeablePromise = allePrs
                .filter((it) => it.checksOk)
                .map(async (it) => {
                    const prdata = await github.request('GET /repos/{owner}/{repo}/pulls/{pull_number}', {
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        pull_number: it.number
                    })
            
                    console.log(`#${it.number}  ${it.title}`);
                    console.log(`data: ${JSON.stringify(prdata.data)}`);
                    console.log('');
                    return {
                        title: it.title,
                        number: it.number,
                        mergeable: prdata.data.mergeable
                    }
                })


            const mergeable = (await Promise.all(mergeablePromise))
                .filter((it) => {
                  return it.mergeable;
                })
            console.log("mergeable: " + mergeable.length)
            
            if (mergeable.length > 0) {
                const pr = mergeable[0]
                console.log('Merger PR', pr.title)
                await github.request('PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge', {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    merge_method: 'squash'
                })
            
              console.log('Starter main workflow')
            
              await github.request(
                  'POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches',
                  {
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      workflow_id: WORKFLOW_ID,
                      ref: 'main',
                  }
              )
            } else {
                console.log('Ingen PRer å merge')
            }