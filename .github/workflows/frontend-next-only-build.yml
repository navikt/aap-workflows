name: frontend-next-only-build

on:
  workflow_call:
    inputs:
      cluster:
        required: true
        type: string
        description: Cluster name
      dynamicenv:
        required: false
        type: string
        description: Env variables to be added to .env.local (e.g. "MY_SECRET=secret"). Can be created in build actions and passed, eg a timestamp of build time

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    env:
      NPM_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      SKIP_YARN_COREPACK_CHECK: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com
          cache: yarn
      - name: Enable Corepack
        run: corepack enable
      - name: Cache client node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
            node_modules
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-
      - name: install dependencies Yarn
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install --immutable
      - name: Copy env-file # TODO: Se om vi kan finne en bedre lÃ¸sning her pÃ¥ sikt
        run: cp .nais/${{ inputs.cluster }}.env .env
      - name: Copy env passed in github actions (Do not use for secrets)
        run: echo  ${{inputs.dynamicenv}} >> .env.local
        if: ${{ inputs.dynamicenv != '' }}
      - name: typecheck
        run: yarn tsc
      - name: run tests
        run: yarn test
      - name: run build
        run: yarn run build
